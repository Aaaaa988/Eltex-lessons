/*
 * This file is generated by jOOQ.
 */
package ru.eltex.database.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.eltex.database.tables.Sale;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SaleRecord extends UpdatableRecordImpl<SaleRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1956227138;

    /**
     * Setter for <code>Sale.id_sale</code>.
     */
    public void setIdSale(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Sale.id_sale</code>.
     */
    public Integer getIdSale() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Sale.sale</code>.
     */
    public void setSale(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>Sale.sale</code>.
     */
    public String getSale() {
        return (String) get(1);
    }

    /**
     * Setter for <code>Sale.cost</code>.
     */
    public void setCost(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>Sale.cost</code>.
     */
    public Integer getCost() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Sale.SALE.ID_SALE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Sale.SALE.SALE_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Sale.SALE.COST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getIdSale();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getSale();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getCost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getIdSale();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getSale();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getCost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SaleRecord value1(Integer value) {
        setIdSale(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SaleRecord value2(String value) {
        setSale(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SaleRecord value3(Integer value) {
        setCost(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SaleRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SaleRecord
     */
    public SaleRecord() {
        super(Sale.SALE);
    }

    /**
     * Create a detached, initialised SaleRecord
     */
    public SaleRecord(Integer idSale, String sale, Integer cost) {
        super(Sale.SALE);

        set(0, idSale);
        set(1, sale);
        set(2, cost);
    }
}
