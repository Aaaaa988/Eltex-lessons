/*
 * This file is generated by jOOQ.
 */
package ru.eltex.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import ru.eltex.database.DefaultSchema;
import ru.eltex.database.tables.records.DevAndLangRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DevAndLang extends TableImpl<DevAndLangRecord> {

    private static final long serialVersionUID = 1692106;

    /**
     * The reference instance of <code>Dev_and_Lang</code>
     */
    public static final DevAndLang DEV_AND_LANG = new DevAndLang();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DevAndLangRecord> getRecordType() {
        return DevAndLangRecord.class;
    }

    /**
     * The column <code>Dev_and_Lang.id_dev</code>.
     */
    public final TableField<DevAndLangRecord, Integer> ID_DEV = createField("id_dev", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Dev_and_Lang.id_lang</code>.
     */
    public final TableField<DevAndLangRecord, Integer> ID_LANG = createField("id_lang", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>Dev_and_Lang</code> table reference
     */
    public DevAndLang() {
        this(DSL.name("Dev_and_Lang"), null);
    }

    /**
     * Create an aliased <code>Dev_and_Lang</code> table reference
     */
    public DevAndLang(String alias) {
        this(DSL.name(alias), DEV_AND_LANG);
    }

    /**
     * Create an aliased <code>Dev_and_Lang</code> table reference
     */
    public DevAndLang(Name alias) {
        this(alias, DEV_AND_LANG);
    }

    private DevAndLang(Name alias, Table<DevAndLangRecord> aliased) {
        this(alias, aliased, null);
    }

    private DevAndLang(Name alias, Table<DevAndLangRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DevAndLangRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ru.eltex.database.tables.DevAndLang.DEV_AND_LANG, "KEY_Dev_and_Lang_PRIMARY", ru.eltex.database.tables.DevAndLang.DEV_AND_LANG.ID_DEV, ru.eltex.database.tables.DevAndLang.DEV_AND_LANG.ID_LANG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DevAndLangRecord>> getKeys() {
        return Arrays.<UniqueKey<DevAndLangRecord>>asList(
              Internal.createUniqueKey(ru.eltex.database.tables.DevAndLang.DEV_AND_LANG, "KEY_Dev_and_Lang_PRIMARY", ru.eltex.database.tables.DevAndLang.DEV_AND_LANG.ID_DEV, ru.eltex.database.tables.DevAndLang.DEV_AND_LANG.ID_LANG)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DevAndLang as(String alias) {
        return new DevAndLang(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DevAndLang as(Name alias) {
        return new DevAndLang(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DevAndLang rename(String name) {
        return new DevAndLang(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DevAndLang rename(Name name) {
        return new DevAndLang(name, null);
    }
}
