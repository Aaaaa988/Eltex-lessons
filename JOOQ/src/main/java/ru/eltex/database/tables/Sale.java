/*
 * This file is generated by jOOQ.
 */
package ru.eltex.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import ru.eltex.database.DefaultSchema;
import ru.eltex.database.tables.records.SaleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sale extends TableImpl<SaleRecord> {

    private static final long serialVersionUID = -1466101574;

    /**
     * The reference instance of <code>Sale</code>
     */
    public static final Sale SALE = new Sale();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SaleRecord> getRecordType() {
        return SaleRecord.class;
    }

    /**
     * The column <code>Sale.id_sale</code>.
     */
    public final TableField<SaleRecord, Integer> ID_SALE = createField("id_sale", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Sale.sale</code>.
     */
    public final TableField<SaleRecord, String> SALE_ = createField("sale", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>Sale.cost</code>.
     */
    public final TableField<SaleRecord, Integer> COST = createField("cost", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>Sale</code> table reference
     */
    public Sale() {
        this(DSL.name("Sale"), null);
    }

    /**
     * Create an aliased <code>Sale</code> table reference
     */
    public Sale(String alias) {
        this(DSL.name(alias), SALE);
    }

    /**
     * Create an aliased <code>Sale</code> table reference
     */
    public Sale(Name alias) {
        this(alias, SALE);
    }

    private Sale(Name alias, Table<SaleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sale(Name alias, Table<SaleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SaleRecord, Integer> getIdentity() {
        return Internal.createIdentity(ru.eltex.database.tables.Sale.SALE, ru.eltex.database.tables.Sale.SALE.ID_SALE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SaleRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ru.eltex.database.tables.Sale.SALE, "KEY_Sale_PRIMARY", ru.eltex.database.tables.Sale.SALE.ID_SALE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SaleRecord>> getKeys() {
        return Arrays.<UniqueKey<SaleRecord>>asList(
              Internal.createUniqueKey(ru.eltex.database.tables.Sale.SALE, "KEY_Sale_PRIMARY", ru.eltex.database.tables.Sale.SALE.ID_SALE)
            , Internal.createUniqueKey(ru.eltex.database.tables.Sale.SALE, "KEY_Sale_sale", ru.eltex.database.tables.Sale.SALE.SALE_, ru.eltex.database.tables.Sale.SALE.COST)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sale as(String alias) {
        return new Sale(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sale as(Name alias) {
        return new Sale(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sale rename(String name) {
        return new Sale(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sale rename(Name name) {
        return new Sale(name, null);
    }
}
